# ~/.gitconfig
# Add any personal global config to ~/.gitconfig.user

[core]
  editor = code --wait

  # Convert line endings to CRLF on checkout (useful only under windows)
  # Change this in ~/.gitconfig.user or per repository if needed
  autocrlf = false

  # Don't consider changes on trailing space (EOL, EOF) as conflicts
  whitespace = -trailing-space
	excludesfile = ~/.gitignore_global

[init]
  defaultBranch = main


### Colors
# Supported colors: [normal, black, red, green, yellow, blue, magenta, cyan, white]
# Supported colors alternatives: hexadecimal color codes like #ff0000, ANSI 256 color values if supported.
# Supported attributes: [bold, dim, ul, blink, reverse] ul: underline, reverse: swap foreground and background

[color]
	# Colors handling on supported terminals, possible values are [auto|always|false]
  ui = auto

[color "branch"]
	# Colors for git branch
  current = green bold		# current branch 
  local = cyan						# local branch 
	upstream = magenta			# remote branch ref in refs/remotes 
	remote = red						# upstream tracking branch 

[color "status"]
	# Colors for git status
	header = normal							# Regular status area text
	branch = green bold					# current branch name
	nobranch = red							# warning on detached HEAD
	added = green								# Added or updated files to be committed
	changed = yellow						# Changes not staged for commit
	unmerged = magenta					# files with unmerged changes
	untracked = red							# Untracked files by Git

[color "decorate"]
	# Colors for git log --decorate
  HEAD = red
  branch = green
  remoteBranch = magenta
  stash = red
  tag = yellow bold

[color "diff"]
	# Colors for git diff
	old = red
	new = green
	meta = yellow
	frag = cyan

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path = 

[mergetool "sourcetree"]
  cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

[commit]
  gpgsign = true
  template = ~/.stCommitMsg

[alias]
  st = status                         # status
	rv = remote -v											# show remotes (verbose)

  br = branch                         # branch
  bv = branch -vv											# branch (full verbose)
  co = checkout                       # switch branches or restore working tree files
  cb = checkout -b                		# create a new branch and switch to it

  ci = commit                         # commit
  cm = commit -m                      # commit with message
  amend = commit --amend              # amend last commit
  reword = !git amend									# alias to amend
  cp = cherry-pick -x                 # play a commit on top of current branch

  last = log -1 HEAD                  # print last commit
  uncommit = reset --soft HEAD~1			# uncommit and keep changes in stage
  undo = !git uncommit                # alias to uncommit
  unstage = reset HEAD                # remove files from index (tracking)
  untrack = rm --cached								# remove file from stage and keep it in working directory

	rb = rebase													# rebase
  rc = rebase --continue              # continue rebase
  rs = rebase --skip                  # skip rebase
  ra = rebase --abort                 # abort rebase

  sh = stash													# stash changes
  sh-list = stash list								# list stashes
  sh-apply = stash apply							# apply stash (restore changes)
  sh-drop = stash drop								# drop stashes (destory changes)

  # log
	lg = log --graph --pretty=tformat:'%C(red)%h%C(auto) - %<(72,trunc)%s %C(green)< %an | %cr >%C(reset)'
	short = log --date=short --pretty=tformat:'%C(red)%h%C(reset) %C(green)[ %cd | %cn ]%C(reset) %s%C(reset)'
  shortnb = log --date=short --pretty=tformat:'%h [ %cd | %cn ] %s'
	changes = log --date=short --name-status --pretty=tformat:'%C(red)%h%C(reset) %C(green)[ %cd | %cn ]%C(reset) %s%C(reset)'
  
	# actions
	push-lease = push --force-with-lease
	prune-tags = !git tag -l | xargs git tag -d && git fetch -t
	reset-upstream = !git reset --hard origin/$(git rev-parse --abbrev-ref HEAD)
	delete-local-merged = !git branch --merged | egrep -wv "$(git config init.defaultBranch || echo 'main|master')" | xargs git branch -d
  ls-alias = !git config --get-regexp alias 	# list available aliases
  ls-local-commits = "!git short @{push}.."		# list non-pushed commits
  who = shortlog -sne													# stats


[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[pull]
  # preserve merge commits on pull
  rebase = merges

[push]
  # push should only carry the current branch when pushing to target
  default = upstream

[rerere]
  # Reuse Recorded Resolution
  enabled = true

[tag]
  # Sort tags as version numbers and not char order
  sort = version:refname

[include]
  path = ~/.gitconfig.user

[includeIf "gitdir:~/Developer/yassir/"]
  path = ~/.gitconfig.yassir
