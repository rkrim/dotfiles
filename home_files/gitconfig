# ~/.gitconfig
# Add any personal global config to ~/.gitconfig.user

[core]
  editor = code --wait

  # Convert line endings to CRLF on checkout (useful only under windows)
  # Change this in ~/.gitconfig.user or per repository if needed
  autocrlf = false

  # Don't consider changes on trailing space (EOL, EOF) as conflicts
  whitespace = -trailing-space
	excludesfile = ~/.gitignore_global

[init]
  defaultBranch = main

### Colors
# Supported colors: [normal, black, red, green, yellow, blue, magenta, cyan, white]
# Supported colors alternatives: hexadecimal color codes like #ff0000, ANSI 256 color values if supported.
# Supported attributes: [bold, dim, ul, blink, reverse] ul: underline, reverse: swap foreground and background

[color]
	# Colors handling on supported terminals, possible values are [auto|always|false]
  ui = auto

[color "branch"]
	# Colors for git branch
  current = green bold		# current branch 
  local = cyan						# local branch 
	upstream = magenta			# remote branch ref in refs/remotes 
	remote = red						# upstream tracking branch 

[color "status"]
	# Colors for git status
	header = normal							# Regular status area text
	branch = green bold					# current branch name
	nobranch = red							# warning on detached HEAD
	added = green								# Added or updated files to be committed
	changed = yellow						# Changes not staged for commit
	unmerged = magenta					# files with unmerged changes
	untracked = red							# Untracked files by Git

[color "decorate"]
	# Colors for git log --decorate
  HEAD = red
  branch = green
  remoteBranch = magenta
  stash = red
  tag = yellow bold

[color "diff"]
	# Colors for git diff
	old = red
	new = green
	meta = yellow
	frag = cyan

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path = 

[mergetool "sourcetree"]
  cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

[commit]
  gpgsign = true
  template = ~/.stCommitMsg

[alias]
  # checkout
  co = checkout                       # checkout
  cob = checkout -back                # checkout to new branch

  # branch
  b = branch                          # branch
  br = branch                         # branch
  bv = branch -v                      # branch (verbose)

  # commit
  ci = commit                         # commit
  cm = commit -m                      # commit with message
  amend = commit --amend              # amend last commit

  # status
  s = status                          # status
  st = status                         # status

  # rebase
  rc = rebase --continue              # continue rebase
  rs = rebase --skip                  # skip rebase
  ra = rebase --abort                 # abort rebase
  rcontinue = rebase --continue       # continue rebase
  rskip = rebase --skip               # skip rebase
  rabort = rebase --abort             # abort rebase

  # cherry-pick
  cp = cherry-pick -x                 # play a commit on top of current branch
  cpick = cherry-pick -x              # play a commit on top of current branch

  # stash
  sh = stash                          # stash changes
  shlist = stash list                 # list stashes
  shapply = stash apply               # apply stash (restore changes)
  shdrop = stash drop                 # drop stashes (destory changes)

  # log
  lg = log --graph --decorate --pretty=format:'%C(yellow)%h%C(white) -%C(auto)%d%C(reset) %s %C(green)(%cr) %C(cyan)<%an>%C(reset)'
  oneline = log --graph --decorate --pretty=oneline --abbrev-commit
  changes = log --pretty=format:'%C(yellow)%h%C(reset) %cr by %C(cyan)%cn%C(reset): %C(green)%s%C(reset)' --name-status
  short = log --pretty=format:'%C(yellow)%h%C(reset) - %C(green)%cd%C(reset) - %C(cyan)%cn%C(reset) :: %C(reset)%s%C(reset)' --date=short
  shortnocolor = log --pretty=format:'%h - %cd - %cn :: %s' --date=short

  # history / reset
  last = log -1 HEAD                  # print last commit
  uncommit = reset --soft HEAD^       # go back before last commit, with files in uncommitted state
  undo = !git uncommit                # same as uncommit
  unstage = reset HEAD                # remove files from index (tracking)

  # remote
  rv = remote -v                      # show remotes (verbose)

  # tags
  prunetags = !git tag -l | xargs git tag -d && git fetch -t

  # stats
  who = shortlog -sne


[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[pull]
  # preserve merge commits on pull
  rebase = merges

[push]
  # push should only carry the current branch when pushing to target
  default = upstream

[rerere]
  # Reuse Recorded Resolution
  enabled = true

[tag]
  # Sort tags as version numbers and not char order
  sort = version:refname

[include]
  path = ~/.gitconfig.user

[includeIf "gitdir:~/Developer/yassir/"]
  path = ~/.gitconfig.yassir
