# ~/.shellenv
# Shell common environment


### Language setting
_export_language () {
  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8
}

### Homebrew command path
_brew_command_path () {
  # Brew is installed on different path following architecture
  # Check that brew exist in preferred location
  local BREW_CMD_x86_64="/usr/local/bin/brew"
  local BREW_CMD_arm64="/opt/homebrew/bin/brew"

  (command -v $BREW_CMD_x86_64 &> /dev/null && echo $BREW_CMD_x86_64) || (command -v $BREW_CMD_arm64 &> /dev/null && echo $BREW_CMD_arm64) || return -1
}

# Export Homebrew Shell Environment
# HOMEBREW_PREFIX, HOMEBREW_CELLAR, HOMEBREW_REPOSITORY, PATH, MANPATH, INFOPATH
_export_brew_shell_environment () {
  local BREW_CMD_PATH=$(_brew_command_path)
  if [[ -z $BREW_CMD_PATH ]]; then
    echo >&2 "Brew not found in preferred location, please check: https://docs.brew.sh/Installation";
    echo >&2 "No brew environment variable to export.";
    return -1;
  else
    # Export brew environment paths
    eval $($BREW_CMD_PATH shellenv)
    export HOMEBREW_NO_INSTALL_CLEANUP=TRUE
    export HOMEBREW_NO_AUTO_UPDATE=TRUE
    export HOMEBREW_EDITOR="code"
  fi
}

# Export Homebrew Packages Environment
# Needs Homebrew shell environment to be exposed
_export_brew_packages_environment () {
  # Coreutils
  local COREUTILS_PREFIX="$HOMEBREW_PREFIX/opt/coreutils"
  [[ -d "$COREUTILS_PREFIX/libexec/gnubin" ]] && export PATH="$COREUTILS_PREFIX/libexec/gnubin:$PATH"
  [[ -d "$COREUTILS_PREFIX/libexec/gnuman" ]] && export MANPATH="$COREUTILS_PREFIX/libexec/gnuman:$MANPATH"

  # Python
  if [[ -d "$HOMEBREW_PREFIX/opt/python/libexec/bin" ]]; then
    export PATH="$HOMEBREW_PREFIX/opt/python/libexec/bin:$PATH"
    export PYTHON_USER_BASE=`python -m site --user-base`
    export PYTHON_USER_SITE=`python -m site --user-site`

    if [[ -d "$PYTHON_USER_BASE/bin" ]]; then
      export PATH="$PYTHON_USER_BASE/bin:$PATH"
    fi
  fi

  # Node
  local NODE_PREFIX="$HOMEBREW_PREFIX/opt/node"
  if [[ -d "$NODE_PREFIX" ]]; then
    export PATH="$NODE_PREFIX/bin:$PATH"
    export NODE_BINARY="$NODE_PREFIX/bin/node"
    export LDFLAGS="-L$NODE_PREFIX/lib"
    export CPPFLAGS="-I$NODE_PREFIX/include"
  fi

  # JavaScript Tool Manager (volta)
  if [[ -d "$HOMEBREW_PREFIX/opt/volta" ]]; then
    export VOLTA_HOME="$HOME/.volta"
    export PATH="$VOLTA_HOME/bin:$PATH"
  fi

  # Ruby
  local RUBY_PREFIX="$HOMEBREW_PREFIX/opt/ruby"
  [[ -d "$RUBY_PREFIX/bin" ]] && export PATH="$RUBY_PREFIX/bin:$PATH"
  [[ -d "$RUBY_PREFIX/lib" ]] && export LDFLAGS="-L$RUBY_PREFIX/lib"
  [[ -d "$RUBY_PREFIX/include" ]] && export CPPFLAGS="-I$RUBY_PREFIX/include"
  [[ -d "$RUBY_PREFIX/lib/pkgconfig" ]] && export PKG_CONFIG_PATH="$RUBY_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"

  # RubyGems
  export GEM_PATH=`command -v gem 2> /dev/null`
  if [[ "$GEM_PATH" ]]; then
    # Default installation folder for binaries installed with gem
    export PATH="`$GEM_PATH env gemdir`/bin:$PATH"
  fi

  # Android development
  if [[ -d "$HOMEBREW_PREFIX/share/android-commandlinetools" ]]; then
    export ANDROID_SDK_ROOT="$HOMEBREW_PREFIX/share/android-commandlinetools"
    export PATH="$ANDROID_SDK_ROOT/emulator:$ANDROID_SDK_ROOT/tools:$ANDROID_SDK_ROOT/tools/bin:$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/ndk-bundle:$PATH"
  fi

  # SQLite
  local SQLITE_PREFIX="$HOMEBREW_PREFIX/opt/sqlite"
  [[ -d "$SQLITE_PREFIX/bin" ]] && export PATH="$SQLITE_PREFIX/bin:$PATH"
  [[ -d "$SQLITE_PREFIX/lib" ]] && export LDFLAGS="-L$SQLITE_PREFIX/lib $LDFLAGS"
  [[ -d "$SQLITE_PREFIX/include" ]] && export CPPFLAGS="-I$SQLITE_PREFIX/include $CPPFLAGS"
  [[ -d "$SQLITE_PREFIX/lib/pkgconfig" ]] && export PKG_CONFIG_PATH="$SQLITE_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
}

# Export JAVA_HOME (default to JDK 17)
_export_java_home () {
  # Using java_home to check for installed java version, 'java_home -V' to list all installed version
  command -v /usr/libexec/java_home > /dev/null 2>&1 || { echo >&2 "Can't process JAVA_HOME."; return; }

  local JAVA_HOME_11=$(/usr/libexec/java_home -failfast -v "11" 2> /dev/null)
  local JAVA_HOME_17=$(/usr/libexec/java_home -failfast -v "17" 2> /dev/null)
  local JAVA_HOME_LATEST=$(/usr/libexec/java_home 2> /dev/null)

  if [ "$JAVA_HOME_17" ]; then
    export JAVA_HOME=$JAVA_HOME_17
  elif [ "$JAVA_HOME_11" ]; then
    export JAVA_HOME=$JAVA_HOME_11
  elif [ "$JAVA_HOME_LATEST" ]; then
    export JAVA_HOME=$JAVA_HOME_LATEST
  fi
}

# Node version manager (nvm)
load_nvm () {
  local NVM_PREFIX="$HOMEBREW_PREFIX/opt/nvm"
  if [[ -e "$NVM_PREFIX" && -d "$HOME/.nvm" ]]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_PREFIX/nvm.sh" ] && source "$NVM_PREFIX/nvm.sh"
    [ -s "$NVM_PREFIX/etc/bash_completion" ] && source "$NVM_PREFIX/etc/bash_completion"
    [ -s "$NVM_PREFIX/etc/bash_completion.d/nvm" ] && source "$NVM_PREFIX/etc/bash_completion.d/nvm"
  else
    echo "'nvm' not installed or '~/.nvm' directory missing. Install it using 'brew install nvm'"
  fi
}

# Software Development Kit Manager (SDKMan)
load_sdkman () {
  [[ -d "$HOME/.sdkman" ]] && export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
}

# Java Environment Management (jEnv)
load_jenv () {
  if [ -d "$HOME/.jenv" ] && command -v jenv > /dev/null; then
    export PATH="$HOME/.jenv/bin:$PATH"
    eval "$(jenv init -)"
  fi
}

# Java home
javahome() {
  unset JAVA_HOME
  export JAVA_HOME=$(/usr/libexec/java_home -failfast -v "$1")
  java --version
}

# Bash Completion
bash_completion() {
	# Main Bash Completion
	local MAIN_COMPLETION="$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh"

  # Source completion file if in interactive mode and the file exists
  if [[ $- =~ i ]]; then
    if [[ -f "$MAIN_COMPLETION" ]]; then 
      source "$MAIN_COMPLETION"
    else
      echo "bash completion not installed or the file location has changed."
    fi
  fi

	# Auto-Complete SSH hostnames (no wildcards)
	if [ -e "$HOME/.ssh/config" ]; then
    complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" scp sftp ssh;
	fi

	# Git Completion
	local GIT_COMPLETION="$HOMEBREW_PREFIX/etc/bash_completion.d/git-completion.bash"
	if [[ -f $GIT_COMPLETION ]]; then
    source $GIT_COMPLETION
	fi

  # ngrok Completion
  if command -v ngrok &>/dev/null; then
    eval "$(ngrok completion)"
  fi
}

ls_colors() {
  # Listing :: LS (GNU or BSD)
  if ls --color &> /dev/null; then
    # GNU
    LS_COLOR_FLAG="--color=auto"
    LS_DIRECTORY_FIRST_FLAG="--group-directories-first"

    ls_colors_dracula () {
      unset LS_COLORS
      LS_COLORS='sg=0;38;5;228;48;5;212:mh=0:no=0;38;5;231:ex=0;38;5;84:mi=0;38;5;203;48;5;235:su=0;38;5;228;48;5;212:rs=0;38;5;215:do=1;38;5;228;48;5;235:fi=0;38;5;231:cd=1;38;5;215;48;5;235:ca=0:bd=1;38;5;215;48;5;235:*~=0;38;5;237:pi=1;38;5;228;48;5;235:st=0;38;5;228;48;5;117:di=0;38;5;141:so=1;38;5;228;48;5;235:or=0;38;5;203;48;5;235:ow=0;38;5;117;48;5;235:ln=0;38;5;117:tw=0;38;5;228;48;5;84:*.r=0;38;5;215:*.z=1;38;5;141:*.d=0;38;5;215:*.m=0;38;5;215:*.c=0;38;5;215:*.p=0;38;5;215:*.o=0;38;5;237:*.a=0;38;5;84:*.t=0;38;5;215:*.h=0;38;5;215:*.nb=0;38;5;215:*.pl=0;38;5;215:*.ll=0;38;5;215:*.sh=0;38;5;215:*css=0;38;5;215:*.ps=0;38;5;215:*.td=0;38;5;215:*.ui=0;38;5;215:*.la=0;38;5;237:*.bz=1;38;5;141:*.vb=0;38;5;215:*.hi=0;38;5;237:*.ts=0;38;5;215:*.py=0;38;5;215:*.pp=0;38;5;215:*.xz=1;38;5;141:*.md=0;38;5;215:*.cr=0;38;5;215:*.bc=0;38;5;237:*.hh=0;38;5;215:*.so=0;38;5;84:*.cc=0;38;5;215:*.ex=0;38;5;215:*.mn=0;38;5;215:*.hs=0;38;5;215:*.lo=0;38;5;237:*.cp=0;38;5;215:*.jl=0;38;5;215:*.fs=0;38;5;215:*.gz=1;38;5;141:*.kt=0;38;5;215:*.7z=1;38;5;141:*.js=0;38;5;215:*.ml=0;38;5;215:*.rs=0;38;5;215:*.el=0;38;5;215:*.gv=0;38;5;215:*.as=0;38;5;215:*.ko=0;38;5;84:*.di=0;38;5;215:*.rb=0;38;5;215:*.pm=0;38;5;215:*.rm=1;38;5;215:*.go=0;38;5;215:*.cs=0;38;5;215:*.wv=0;38;5;215:*.elm=0;38;5;215:*.dot=0;38;5;215:*.svg=0;38;5;228:*.pro=0;38;5;215:*.csx=0;38;5;215:*.zst=1;38;5;141:*.tbz=1;38;5;141:*.gvy=0;38;5;215:*.gif=0;38;5;228:*.dpr=0;38;5;215:*.xmp=0;38;5;215:*.dox=0;38;5;215:*.mkv=1;38;5;215:*.zsh=0;38;5;215:*.htc=0;38;5;215:*.eps=0;38;5;228:*.fnt=0;38;5;215:*.mov=1;38;5;215:*.jar=1;38;5;141:*.vcd=1;38;5;141:*.zip=1;38;5;141:*.pps=0;38;5;215:*.ods=0;38;5;215:*.fsi=0;38;5;215:*.out=0;38;5;237:*.sbt=0;38;5;215:*.php=0;38;5;215:*.epp=0;38;5;215:*.png=0;38;5;228:*.tml=0;38;5;215:*.doc=0;38;5;215:*.git=0;38;5;237:*.log=0;38;5;237:*.cfg=0;38;5;215:*.pbm=0;38;5;228:*.ini=0;38;5;215:*.inl=0;38;5;215:*.pyc=0;38;5;237:*.arj=1;38;5;141:*.psd=0;38;5;228:*.iso=1;38;5;141:*.tmp=0;38;5;237:*.m4v=1;38;5;215:*.ppt=0;38;5;215:*.m4a=0;38;5;215:*.tgz=1;38;5;141:*.fsx=0;38;5;215:*.bmp=0;38;5;228:*.h++=0;38;5;215:*.bag=1;38;5;141:*.sty=0;38;5;237:*.ps1=0;38;5;215:*.mpg=1;38;5;215:*.def=0;38;5;215:*.blg=0;38;5;237:*.fls=0;38;5;237:*.txt=0;38;5;215:*.kts=0;38;5;215:*.pod=0;38;5;215:*.fon=0;38;5;215:*.jpg=0;38;5;228:*.asa=0;38;5;215:*.ipp=0;38;5;215:*.tar=1;38;5;141:*.mp4=1;38;5;215:*.pid=0;38;5;237:*.pkg=1;38;5;141:*.wma=0;38;5;215:*TODO=1;38;5;215:*.tex=0;38;5;215:*.ics=0;38;5;215:*.rpm=1;38;5;141:*.mp3=0;38;5;215:*.lua=0;38;5;215:*.vim=0;38;5;215:*.exe=0;38;5;84:*.bbl=0;38;5;237:*.cgi=0;38;5;215:*.aux=0;38;5;237:*.inc=0;38;5;215:*.swf=1;38;5;215:*.sxi=0;38;5;215:*.bat=0;38;5;84:*.avi=1;38;5;215:*.swp=0;38;5;237:*.odp=0;38;5;215:*.awk=0;38;5;215:*.htm=0;38;5;215:*.ind=0;38;5;237:*.bin=1;38;5;141:*.ogg=0;38;5;215:*.exs=0;38;5;215:*.com=0;38;5;84:*.nix=0;38;5;215:*.pyo=0;38;5;237:*.mli=0;38;5;215:*.ltx=0;38;5;215:*.rtf=0;38;5;215:*.rst=0;38;5;215:*.cxx=0;38;5;215:*.sql=0;38;5;215:*.deb=1;38;5;141:*.erl=0;38;5;215:*.cpp=0;38;5;215:*.mir=0;38;5;215:*.tsx=0;38;5;215:*.wav=0;38;5;215:*.odt=0;38;5;215:*.xml=0;38;5;215:*.pgm=0;38;5;228:*.sxw=0;38;5;215:*.hpp=0;38;5;215:*.xls=0;38;5;215:*.xlr=0;38;5;215:*.mid=0;38;5;215:*hgrc=0;38;5;215:*.flv=1;38;5;215:*.kex=0;38;5;215:*.rar=1;38;5;141:*.ilg=0;38;5;237:*.csv=0;38;5;215:*.yml=0;38;5;215:*.ttf=0;38;5;215:*.clj=0;38;5;215:*.vob=1;38;5;215:*.hxx=0;38;5;215:*.apk=1;38;5;141:*.dmg=1;38;5;141:*.toc=0;38;5;237:*.dll=0;38;5;84:*.ppm=0;38;5;228:*.tif=0;38;5;228:*.aif=0;38;5;215:*.wmv=1;38;5;215:*.tcl=0;38;5;215:*.bst=0;38;5;215:*.pas=0;38;5;215:*.bak=0;38;5;237:*.c++=0;38;5;215:*.ico=0;38;5;228:*.img=1;38;5;141:*.xcf=0;38;5;228:*.bz2=1;38;5;141:*.idx=0;38;5;237:*.bsh=0;38;5;215:*.pdf=0;38;5;215:*.otf=0;38;5;215:*.pyd=0;38;5;237:*.bcf=0;38;5;237:*.bib=0;38;5;215:*.orig=0;38;5;237:*.tiff=0;38;5;228:*.fish=0;38;5;215:*.xlsx=0;38;5;215:*.docx=0;38;5;215:*.opus=0;38;5;215:*.pptx=0;38;5;215:*.json=0;38;5;215:*.jpeg=0;38;5;228:*.tbz2=1;38;5;141:*.epub=0;38;5;215:*.bash=0;38;5;215:*.psd1=0;38;5;215:*.hgrc=0;38;5;215:*.toml=0;38;5;215:*.lock=0;38;5;237:*.dart=0;38;5;215:*.psm1=0;38;5;215:*.flac=0;38;5;215:*.java=0;38;5;215:*.rlib=0;38;5;237:*.yaml=0;38;5;215:*.conf=0;38;5;215:*.less=0;38;5;215:*.lisp=0;38;5;215:*.make=0;38;5;215:*.mpeg=1;38;5;215:*.webm=1;38;5;215:*.h264=1;38;5;215:*.diff=0;38;5;215:*.purs=0;38;5;215:*.html=0;38;5;215:*.scala=0;38;5;215:*.shtml=0;38;5;215:*.swift=0;38;5;215:*.cabal=0;38;5;215:*.ipynb=0;38;5;215:*.xhtml=0;38;5;215:*.patch=0;38;5;215:*.mdown=0;38;5;215:*.class=0;38;5;237:*.dyn_o=0;38;5;237:*.cache=0;38;5;237:*.toast=1;38;5;141:*.cmake=0;38;5;215:*shadow=0;38;5;215:*README=0;38;5;215:*passwd=0;38;5;215:*.matlab=0;38;5;215:*.groovy=0;38;5;215:*LICENSE=0;38;5;215:*TODO.md=1;38;5;215:*.config=0;38;5;215:*.flake8=0;38;5;215:*COPYING=0;38;5;215:*INSTALL=0;38;5;215:*.dyn_hi=0;38;5;237:*.gradle=0;38;5;215:*.ignore=0;38;5;215:*Doxyfile=0;38;5;215:*TODO.txt=1;38;5;215:*setup.py=0;38;5;215:*.gemspec=0;38;5;215:*.desktop=0;38;5;215:*Makefile=0;38;5;215:*.kdevelop=0;38;5;215:*README.md=0;38;5;215:*.rgignore=0;38;5;215:*.DS_Store=0;38;5;237:*.cmake.in=0;38;5;215:*configure=0;38;5;215:*COPYRIGHT=0;38;5;215:*.fdignore=0;38;5;215:*.markdown=0;38;5;215:*CODEOWNERS=0;38;5;215:*SConstruct=0;38;5;215:*.localized=0;38;5;237:*.gitconfig=0;38;5;215:*.gitignore=0;38;5;215:*Dockerfile=0;38;5;215:*SConscript=0;38;5;215:*INSTALL.md=0;38;5;215:*.scons_opt=0;38;5;237:*README.txt=0;38;5;215:*.gitmodules=0;38;5;215:*Makefile.am=0;38;5;215:*LICENSE-MIT=0;38;5;215:*INSTALL.txt=0;38;5;215:*MANIFEST.in=0;38;5;215:*.travis.yml=0;38;5;215:*Makefile.in=0;38;5;237:*.synctex.gz=0;38;5;237:*.fdb_latexmk=0;38;5;237:*configure.ac=0;38;5;215:*appveyor.yml=0;38;5;215:*.applescript=0;38;5;215:*CONTRIBUTORS=0;38;5;215:*.clang-format=0;38;5;215:*CMakeLists.txt=0;38;5;215:*CMakeCache.txt=0;38;5;237:*LICENSE-APACHE=0;38;5;215:*.gitattributes=0;38;5;215:*CONTRIBUTORS.md=0;38;5;215:*CONTRIBUTORS.txt=0;38;5;215:*.sconsign.dblite=0;38;5;237:*requirements.txt=0;38;5;215:*package-lock.json=0;38;5;237:*.CFUserTextEncoding=0;38;5;237'
      export LS_COLORS
    }

    ls_colors_molokai () {
      unset LS_COLORS
      LS_COLORS='bd=0;38;5;81;48;5;236:or=0;38;5;16;48;5;203:do=0;38;5;16;48;5;203:su=0:no=0:fi=0:pi=0;38;5;16;48;5;81:st=0:mi=0;38;5;16;48;5;203:sg=0:*~=0;38;5;243:ca=0:rs=0:ex=1;38;5;203:ow=0:ln=0;38;5;203:di=0;38;5;81:cd=0;38;5;203;48;5;236:tw=0:so=0;38;5;16;48;5;203:mh=0:*.a=1;38;5;203:*.c=0;38;5;48:*.z=4;38;5;203:*.d=0;38;5;48:*.o=0;38;5;243:*.m=0;38;5;48:*.t=0;38;5;48:*.p=0;38;5;48:*.r=0;38;5;48:*.h=0;38;5;48:*.bz=4;38;5;203:*.gv=0;38;5;48:*.cc=0;38;5;48:*.bc=0;38;5;243:*.ll=0;38;5;48:*.as=0;38;5;48:*.go=0;38;5;48:*.fs=0;38;5;48:*.vb=0;38;5;48:*.kt=0;38;5;48:*.cr=0;38;5;48:*.hh=0;38;5;48:*.cp=0;38;5;48:*.lo=0;38;5;243:*.pl=0;38;5;48:*.td=0;38;5;48:*.wv=0;38;5;208:*.el=0;38;5;48:*.ml=0;38;5;48:*.hs=0;38;5;48:*.jl=0;38;5;48:*.py=0;38;5;48:*.ui=0;38;5;149:*.hi=0;38;5;243:*.gz=4;38;5;203:*.7z=4;38;5;203:*.rb=0;38;5;48:*.rm=0;38;5;208:*.so=1;38;5;203:*.mn=0;38;5;48:*.nb=0;38;5;48:*.ps=0;38;5;186:*css=0;38;5;48:*.di=0;38;5;48:*.pp=0;38;5;48:*.ts=0;38;5;48:*.xz=4;38;5;203:*.cs=0;38;5;48:*.rs=0;38;5;48:*.sh=0;38;5;48:*.la=0;38;5;243:*.ex=0;38;5;48:*.pm=0;38;5;48:*.md=0;38;5;185:*.js=0;38;5;48:*.ko=1;38;5;203:*.aif=0;38;5;208:*.vcd=4;38;5;203:*.hxx=0;38;5;48:*.tbz=4;38;5;203:*.xmp=0;38;5;149:*.bin=4;38;5;203:*.bib=0;38;5;149:*.mpg=0;38;5;208:*.pas=0;38;5;48:*.fnt=0;38;5;208:*.com=1;38;5;203:*.exe=1;38;5;203:*.dll=1;38;5;203:*.ppm=0;38;5;208:*.bcf=0;38;5;243:*.vim=0;38;5;48:*.ics=0;38;5;186:*.png=0;38;5;208:*.c++=0;38;5;48:*.dox=0;38;5;149:*.flv=0;38;5;208:*.dpr=0;38;5;48:*.rtf=0;38;5;186:*.pyc=0;38;5;243:*.tgz=4;38;5;203:*.nix=0;38;5;149:*.vob=0;38;5;208:*hgrc=0;38;5;149:*.idx=0;38;5;243:*.ppt=0;38;5;186:*.aux=0;38;5;243:*.ltx=0;38;5;48:*.dot=0;38;5;48:*.deb=4;38;5;203:*.swp=0;38;5;243:*.odp=0;38;5;186:*.blg=0;38;5;243:*.erl=0;38;5;48:*.inc=0;38;5;48:*.mp3=0;38;5;208:*.ogg=0;38;5;208:*.bst=0;38;5;149:*.ilg=0;38;5;243:*.toc=0;38;5;243:*.ini=0;38;5;149:*.rpm=4;38;5;203:*.out=0;38;5;243:*.zsh=0;38;5;48:*.tcl=0;38;5;48:*.cfg=0;38;5;149:*.xls=0;38;5;186:*.arj=4;38;5;203:*.bz2=4;38;5;203:*.sxw=0;38;5;186:*.apk=4;38;5;203:*.elm=0;38;5;48:*.psd=0;38;5;208:*.xml=0;38;5;185:*.sbt=0;38;5;48:*.bmp=0;38;5;208:*.bak=0;38;5;243:*.xcf=0;38;5;208:*.sty=0;38;5;243:*.pkg=4;38;5;203:*.xlr=0;38;5;186:*.gif=0;38;5;208:*.avi=0;38;5;208:*.tml=0;38;5;149:*.pdf=0;38;5;186:*.def=0;38;5;48:*.lua=0;38;5;48:*.tsx=0;38;5;48:*.ps1=0;38;5;48:*.fls=0;38;5;243:*.txt=0;38;5;185:*.kex=0;38;5;186:*.otf=0;38;5;208:*.doc=0;38;5;186:*.asa=0;38;5;48:*.jar=4;38;5;203:*.pod=0;38;5;48:*.rst=0;38;5;185:*.ods=0;38;5;186:*.ttf=0;38;5;208:*.h++=0;38;5;48:*.htc=0;38;5;48:*.mov=0;38;5;208:*.htm=0;38;5;185:*.exs=0;38;5;48:*TODO=1:*.mir=0;38;5;48:*.iso=4;38;5;203:*.odt=0;38;5;186:*.rar=4;38;5;203:*.swf=0;38;5;208:*.tmp=0;38;5;243:*.fon=0;38;5;208:*.pyo=0;38;5;243:*.pyd=0;38;5;243:*.wma=0;38;5;208:*.gvy=0;38;5;48:*.zst=4;38;5;203:*.cpp=0;38;5;48:*.yml=0;38;5;149:*.csx=0;38;5;48:*.img=4;38;5;203:*.hpp=0;38;5;48:*.ipp=0;38;5;48:*.ico=0;38;5;208:*.fsx=0;38;5;48:*.m4a=0;38;5;208:*.wmv=0;38;5;208:*.bat=1;38;5;203:*.sxi=0;38;5;186:*.git=0;38;5;243:*.bbl=0;38;5;243:*.php=0;38;5;48:*.svg=0;38;5;208:*.clj=0;38;5;48:*.wav=0;38;5;208:*.cgi=0;38;5;48:*.eps=0;38;5;208:*.sql=0;38;5;48:*.log=0;38;5;243:*.fsi=0;38;5;48:*.mid=0;38;5;208:*.pro=0;38;5;149:*.dmg=4;38;5;203:*.mp4=0;38;5;208:*.awk=0;38;5;48:*.pps=0;38;5;186:*.bag=4;38;5;203:*.mkv=0;38;5;208:*.tar=4;38;5;203:*.pbm=0;38;5;208:*.pgm=0;38;5;208:*.zip=4;38;5;203:*.ind=0;38;5;243:*.inl=0;38;5;48:*.epp=0;38;5;48:*.mli=0;38;5;48:*.bsh=0;38;5;48:*.csv=0;38;5;185:*.cxx=0;38;5;48:*.tex=0;38;5;48:*.jpg=0;38;5;208:*.m4v=0;38;5;208:*.tif=0;38;5;208:*.kts=0;38;5;48:*.pid=0;38;5;243:*.opus=0;38;5;208:*.epub=0;38;5;186:*.conf=0;38;5;149:*.html=0;38;5;185:*.fish=0;38;5;48:*.less=0;38;5;48:*.psm1=0;38;5;48:*.java=0;38;5;48:*.mpeg=0;38;5;208:*.toml=0;38;5;149:*.dart=0;38;5;48:*.h264=0;38;5;208:*.psd1=0;38;5;48:*.purs=0;38;5;48:*.lock=0;38;5;243:*.json=0;38;5;149:*.docx=0;38;5;186:*.lisp=0;38;5;48:*.hgrc=0;38;5;149:*.pptx=0;38;5;186:*.webm=0;38;5;208:*.tbz2=4;38;5;203:*.tiff=0;38;5;208:*.yaml=0;38;5;149:*.make=0;38;5;149:*.rlib=0;38;5;243:*.jpeg=0;38;5;208:*.flac=0;38;5;208:*.orig=0;38;5;243:*.xlsx=0;38;5;186:*.diff=0;38;5;48:*.bash=0;38;5;48:*.cabal=0;38;5;48:*.mdown=0;38;5;185:*.patch=0;38;5;48:*.shtml=0;38;5;185:*.ipynb=0;38;5;48:*.cmake=0;38;5;149:*.scala=0;38;5;48:*shadow=0;38;5;149:*passwd=0;38;5;149:*.swift=0;38;5;48:*.cache=0;38;5;243:*.toast=4;38;5;203:*README=0;38;5;16;48;5;186:*.xhtml=0;38;5;185:*.class=0;38;5;243:*.dyn_o=0;38;5;243:*.dyn_hi=0;38;5;243:*INSTALL=0;38;5;16;48;5;186:*.gradle=0;38;5;48:*.ignore=0;38;5;149:*.config=0;38;5;149:*LICENSE=0;38;5;249:*TODO.md=1:*.flake8=0;38;5;149:*COPYING=0;38;5;249:*.matlab=0;38;5;48:*.groovy=0;38;5;48:*.gemspec=0;38;5;149:*TODO.txt=1:*.desktop=0;38;5;149:*Doxyfile=0;38;5;149:*Makefile=0;38;5;149:*setup.py=0;38;5;149:*COPYRIGHT=0;38;5;249:*.DS_Store=0;38;5;243:*.fdignore=0;38;5;149:*configure=0;38;5;149:*.rgignore=0;38;5;149:*.markdown=0;38;5;185:*README.md=0;38;5;16;48;5;186:*.kdevelop=0;38;5;149:*.cmake.in=0;38;5;149:*SConscript=0;38;5;149:*README.txt=0;38;5;16;48;5;186:*Dockerfile=0;38;5;149:*.localized=0;38;5;243:*CODEOWNERS=0;38;5;149:*SConstruct=0;38;5;149:*INSTALL.md=0;38;5;16;48;5;186:*.gitignore=0;38;5;149:*.gitconfig=0;38;5;149:*.scons_opt=0;38;5;243:*Makefile.in=0;38;5;243:*MANIFEST.in=0;38;5;149:*.travis.yml=0;38;5;186:*.gitmodules=0;38;5;149:*LICENSE-MIT=0;38;5;249:*.synctex.gz=0;38;5;243:*Makefile.am=0;38;5;149:*INSTALL.txt=0;38;5;16;48;5;186:*.applescript=0;38;5;48:*CONTRIBUTORS=0;38;5;16;48;5;186:*.fdb_latexmk=0;38;5;243:*appveyor.yml=0;38;5;186:*configure.ac=0;38;5;149:*.clang-format=0;38;5;149:*.gitattributes=0;38;5;149:*CMakeLists.txt=0;38;5;149:*CMakeCache.txt=0;38;5;243:*LICENSE-APACHE=0;38;5;249:*CONTRIBUTORS.md=0;38;5;16;48;5;186:*requirements.txt=0;38;5;149:*.sconsign.dblite=0;38;5;243:*CONTRIBUTORS.txt=0;38;5;16;48;5;186:*package-lock.json=0;38;5;243:*.CFUserTextEncoding=0;38;5;243'
      export LS_COLORS
    }

    ls_colors_defaults () {
      local LS_COLORS_SCHEME_FILE_PATH=~/.shellcolors
      if [[ -n $LS_COLORS_SCHEME_FILE_PATH ]] && command -v dircolors &> /dev/null; then
        unset LS_COLORS
        eval "$(dircolors ${LS_COLORS_SCHEME_FILE_PATH})"
      else
        ls_colors_dracula
      fi
    }
    ls_colors_defaults
  else
    # BSD
    # See ls Man Page or macOS Man Pages (Apple developer)
    # https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/ls.1.html
    #
    # Check this generator for a preview and fast customization result:
    # https://geoff.greer.fm/lscolors/

    LS_COLOR_FLAG="-G"
    # export CLICOLOR=1 (ls used with the color flag instead)
    export LSCOLORS="GxFxExDxCxegedabagaced"
  fi
}

# Initialize starship prompt
_init_starship() {
  if command -v starship &>/dev/null; then
    export STARSHIP_CONFIG=~/.config/starship/starship.toml
    eval "$(starship init bash)"
  fi
}

# Initialize zoxide navigation
_init_zoxide() {
    if command -v zoxide &>/dev/null; then
        eval "$(zoxide init --cmd cd bash)"
    fi
}

_load_common_commands() {
  ls_colors
  _init_starship
  _init_zoxide
}


### Helper functions ##########################################################

# Compare arg1 with arg2 taking arg3 as a version number separator
# return -1 if arg1 > arg2, 0 if arg1 == arg2, 1 if arg1 < arg2
# Original from: https://stackoverflow.com/questions/4023830/how-compare-two-strings-in-dot-separated-version-format-in-bash
# Added version trim
_version_compare () {

  if [[ $1 == $2 ]]; then
    return 0
  fi

  local IFS=$3
  local index version1=($1) version2=($2)

  # fill empty fields in version1 with zeros
  for ((index=${#version1[@]}; index<${#version2[@]}; index++)); do
    version1[index]=0
  done

  for ((index=0; index<${#version1[@]}; index++)); do
    if [[ -z ${version2[i]} ]]; then
      # fill empty fields in ver2 with zeros
      version2[index]=0
    fi

    if ((10#${version1[index]%%[^0-9]*} > 10#${version2[index]%%[^0-9]*})); then
      return -1
    fi

    if ((10#${version1[index]%%[^0-9]*} < 10#${version2[index]%%[^0-9]*})); then
      return 1
    fi
  done

  return 0
}
